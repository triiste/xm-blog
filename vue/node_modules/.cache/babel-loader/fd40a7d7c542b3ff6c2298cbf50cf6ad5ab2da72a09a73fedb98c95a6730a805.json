{"ast":null,"code":"export default {\n  data() {\n    return {\n      websocket: null\n    };\n  },\n  methods: {\n    initializeWebSocket(userId) {\n      const websocket = new WebSocket(`ws://localhost:9090/imserverSingle/${userId}`);\n    },\n    onWebSocketOpen() {\n      console.log('WebSocket连接已打开');\n      // 连接成功后的逻辑，例如获取初始数据\n      // 存储 WebSocket 连接到 Vuex\n      this.$store.commit('setWebSocket', websocket);\n    },\n    onWebSocketClose() {\n      console.log('WebSocket连接已关闭');\n      this.$store.commit('clearWebSocket');\n      // 连接关闭后的逻辑\n    },\n\n    onWebSocketMessage(event) {\n      console.log('收到WebSocket消息:', event.data);\n      // 处理收到的WebSocket消息\n    }\n    // 其他WebSocket相关方法和逻辑\n  },\n\n  // 在组件销毁前关闭WebSocket连接\n  beforeDestroy() {\n    const websocket1 = this.$store.state.websocket;\n    if (websocket1) {\n      websocket1.close();\n    }\n  }\n};","map":{"version":3,"names":["data","websocket","methods","initializeWebSocket","userId","WebSocket","onWebSocketOpen","console","log","$store","commit","onWebSocketClose","onWebSocketMessage","event","beforeDestroy","websocket1","state","close"],"sources":["C:/Users/wcf/springboot-vue框架实操/xm-blog/vue/src/store/websocketMixin.js"],"sourcesContent":["export default {\r\n    data() {\r\n        return {\r\n            websocket: null,\r\n        };\r\n    },\r\n    methods: {\r\n        initializeWebSocket(userId) {\r\n            const websocket = new WebSocket(`ws://localhost:9090/imserverSingle/${userId}`);\r\n\r\n        },\r\n        onWebSocketOpen() {\r\n            console.log('WebSocket连接已打开');\r\n            // 连接成功后的逻辑，例如获取初始数据\r\n            // 存储 WebSocket 连接到 Vuex\r\n            this.$store.commit('setWebSocket', websocket);\r\n        },\r\n        onWebSocketClose() {\r\n            console.log('WebSocket连接已关闭');\r\n            this.$store.commit('clearWebSocket');\r\n            // 连接关闭后的逻辑\r\n        },\r\n        onWebSocketMessage(event) {\r\n            console.log('收到WebSocket消息:', event.data);\r\n            // 处理收到的WebSocket消息\r\n        },\r\n        // 其他WebSocket相关方法和逻辑\r\n    },\r\n    // 在组件销毁前关闭WebSocket连接\r\n    beforeDestroy() {\r\n        const websocket1 = this.$store.state.websocket;\r\n        if (websocket1) {\r\n            websocket1.close();\r\n        }\r\n    },\r\n};\r\n"],"mappings":"AAAA,eAAe;EACXA,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,SAAS,EAAE;IACf,CAAC;EACL,CAAC;EACDC,OAAO,EAAE;IACLC,mBAAmBA,CAACC,MAAM,EAAE;MACxB,MAAMH,SAAS,GAAG,IAAII,SAAS,CAAE,sCAAqCD,MAAO,EAAC,CAAC;IAEnF,CAAC;IACDE,eAAeA,CAAA,EAAG;MACdC,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;MAC7B;MACA;MACA,IAAI,CAACC,MAAM,CAACC,MAAM,CAAC,cAAc,EAAET,SAAS,CAAC;IACjD,CAAC;IACDU,gBAAgBA,CAAA,EAAG;MACfJ,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;MAC7B,IAAI,CAACC,MAAM,CAACC,MAAM,CAAC,gBAAgB,CAAC;MACpC;IACJ,CAAC;;IACDE,kBAAkBA,CAACC,KAAK,EAAE;MACtBN,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEK,KAAK,CAACb,IAAI,CAAC;MACzC;IACJ;IACA;EACJ,CAAC;;EACD;EACAc,aAAaA,CAAA,EAAG;IACZ,MAAMC,UAAU,GAAG,IAAI,CAACN,MAAM,CAACO,KAAK,CAACf,SAAS;IAC9C,IAAIc,UAAU,EAAE;MACZA,UAAU,CAACE,KAAK,CAAC,CAAC;IACtB;EACJ;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}