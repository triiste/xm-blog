{"ast":null,"code":"export default {\n  data() {\n    return {\n      websocket: null\n    };\n  },\n  methods: {\n    initializeWebSocket(userId) {\n      this.websocket = new WebSocket(`ws://localhost:9090/imserverSingle/${userId}`);\n      this.websocket.onopen = this.onWebSocketOpen;\n      this.websocket.onclose = this.onWebSocketClose;\n      this.websocket.onmessage = this.onWebSocketMessage;\n    },\n    onWebSocketOpen() {\n      console.log('WebSocket连接已打开');\n      this.$store.commit('setWebSocket', websocket);\n\n      // 连接成功后的逻辑，例如获取初始数据\n    },\n\n    onWebSocketClose() {\n      console.log('WebSocket连接已关闭');\n      this.$store.commit('clearWebSocket');\n      // 连接关闭后的逻辑\n    },\n\n    onWebSocketMessage(event) {\n      console.log('收到WebSocket消息:', event.data);\n      // 处理收到的WebSocket消息\n    }\n    // 其他WebSocket相关方法和逻辑\n  },\n\n  // 在组件销毁前关闭WebSocket连接\n  beforeDestroy() {\n    const websocket = this.$store.state.websocket;\n    if (websocket) {\n      websocket.close();\n    }\n  }\n};","map":{"version":3,"names":["data","websocket","methods","initializeWebSocket","userId","WebSocket","onopen","onWebSocketOpen","onclose","onWebSocketClose","onmessage","onWebSocketMessage","console","log","$store","commit","event","beforeDestroy","state","close"],"sources":["C:/Users/wcf/springboot-vue框架实操/xm-blog/vue/src/store/websocketMixin.js"],"sourcesContent":["export default {\r\n    data() {\r\n        return {\r\n            websocket: null,\r\n        };\r\n    },\r\n    methods: {\r\n        initializeWebSocket(userId) {\r\n            this.websocket = new WebSocket(`ws://localhost:9090/imserverSingle/${userId}`);\r\n            this.websocket.onopen = this.onWebSocketOpen;\r\n            this.websocket.onclose = this.onWebSocketClose;\r\n            this.websocket.onmessage = this.onWebSocketMessage;\r\n        },\r\n        onWebSocketOpen() {\r\n            console.log('WebSocket连接已打开');\r\n            this.$store.commit('setWebSocket', websocket);\r\n\r\n            // 连接成功后的逻辑，例如获取初始数据\r\n        },\r\n        onWebSocketClose() {\r\n            console.log('WebSocket连接已关闭');\r\n            this.$store.commit('clearWebSocket');\r\n            // 连接关闭后的逻辑\r\n        },\r\n        onWebSocketMessage(event) {\r\n            console.log('收到WebSocket消息:', event.data);\r\n            // 处理收到的WebSocket消息\r\n        },\r\n        // 其他WebSocket相关方法和逻辑\r\n    },\r\n    // 在组件销毁前关闭WebSocket连接\r\n    beforeDestroy() {\r\n        const websocket = this.$store.state.websocket;\r\n        if (websocket) {\r\n            websocket.close();\r\n        }\r\n    },\r\n};\r\n"],"mappings":"AAAA,eAAe;EACXA,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,SAAS,EAAE;IACf,CAAC;EACL,CAAC;EACDC,OAAO,EAAE;IACLC,mBAAmBA,CAACC,MAAM,EAAE;MACxB,IAAI,CAACH,SAAS,GAAG,IAAII,SAAS,CAAE,sCAAqCD,MAAO,EAAC,CAAC;MAC9E,IAAI,CAACH,SAAS,CAACK,MAAM,GAAG,IAAI,CAACC,eAAe;MAC5C,IAAI,CAACN,SAAS,CAACO,OAAO,GAAG,IAAI,CAACC,gBAAgB;MAC9C,IAAI,CAACR,SAAS,CAACS,SAAS,GAAG,IAAI,CAACC,kBAAkB;IACtD,CAAC;IACDJ,eAAeA,CAAA,EAAG;MACdK,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;MAC7B,IAAI,CAACC,MAAM,CAACC,MAAM,CAAC,cAAc,EAAEd,SAAS,CAAC;;MAE7C;IACJ,CAAC;;IACDQ,gBAAgBA,CAAA,EAAG;MACfG,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;MAC7B,IAAI,CAACC,MAAM,CAACC,MAAM,CAAC,gBAAgB,CAAC;MACpC;IACJ,CAAC;;IACDJ,kBAAkBA,CAACK,KAAK,EAAE;MACtBJ,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEG,KAAK,CAAChB,IAAI,CAAC;MACzC;IACJ;IACA;EACJ,CAAC;;EACD;EACAiB,aAAaA,CAAA,EAAG;IACZ,MAAMhB,SAAS,GAAG,IAAI,CAACa,MAAM,CAACI,KAAK,CAACjB,SAAS;IAC7C,IAAIA,SAAS,EAAE;MACXA,SAAS,CAACkB,KAAK,CAAC,CAAC;IACrB;EACJ;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}