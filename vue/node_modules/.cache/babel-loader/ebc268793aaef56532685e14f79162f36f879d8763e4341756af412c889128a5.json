{"ast":null,"code":"import \"core-js/modules/web.dom-exception.stack.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\n// import E from \"wangeditor\";\nimport hljs from \"highlight.js\";\nimport axios from \"axios\";\nimport Footer from \"@/components/Footer\";\nimport markdownIt from 'markdown-it';\nimport mavonEditor from 'mavon-editor';\nexport default {\n  components: {\n    Footer\n  },\n  name: \"NewBlog\",\n  data() {\n    return {\n      form: {},\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      rules: {},\n      tagsArr: [],\n      categoryList: [],\n      editor: null,\n      blogId: this.$route.query.blogId\n    };\n  },\n  mounted() {\n    this.$request.get('/category/selectAll').then(res => {\n      this.categoryList = res.data || [];\n    });\n    this.$request.get('/blog/selectById/' + this.blogId).then(res => {\n      this.form = res.data || {};\n      if (this.form.id) {\n        this.tagsArr = JSON.parse(this.form.tags || '[]');\n        // setTimeout(() => {\n        //   this.editor.txt.html(this.form.content)\n        // }, 0)\n      }\n    });\n    // this.setRichText()\n  },\n\n  methods: {\n    generateCover() {\n      const canvas = this.$refs.coverCanvas;\n      const context = canvas.getContext(\"2d\");\n\n      // 清空画布\n      context.clearRect(0, 0, canvas.width, canvas.height);\n\n      // 添加标签文本\n      context.font = \"20px Arial\";\n      context.fillStyle = \"#000000\";\n      context.fillText(`#考研`, 10, 30);\n\n      // 将生成的图片保存为DataURL\n      const imageDataURL = canvas.toDataURL(\"image/png\");\n\n      // 更新表单中的封面数据\n      this.form.cover = imageDataURL;\n\n      // 上传生成的图片到服务器\n      this.uploadGeneratedImage(imageDataURL);\n    },\n    uploadGeneratedImage(imageDataURL) {\n      // 从生成的图片数据中提取实际的图片二进制数据\n      const imageData = imageDataURL.split(',')[1];\n      const binaryImageData = atob(imageData);\n      const arrayBuffer = new ArrayBuffer(binaryImageData.length);\n      const uint8Array = new Uint8Array(arrayBuffer);\n      for (let i = 0; i < binaryImageData.length; i++) {\n        uint8Array[i] = binaryImageData.charCodeAt(i);\n      }\n\n      // 创建一个 FormData 对象，并添加生成的图片数据\n      const formData = new FormData();\n      formData.append('coverImage', new Blob([arrayBuffer], {\n        type: 'image/png'\n      }));\n\n      // 使用 Axios 发送 POST 请求\n      axios.post('http://127.0.0.1:9090/files/upload', formData, {\n        headers: {\n          'Authorization': 'Bearer ' + this.user.token,\n          // 添加其他需要的请求头\n          'Content-Type': 'multipart/form-data'\n        }\n      }).then(response => {\n        // 处理服务器返回的数据\n\n        console.log('Server response:', response.data);\n      }).catch(error => {\n        // 处理错误\n        console.error('Error uploading image:', error);\n      });\n    },\n    save() {\n      // 保存按钮触发的逻辑  它会触发新增或者更新\n      this.$refs.formRef.validate(valid => {\n        if (valid) {\n          this.form.tags = JSON.stringify(this.tagsArr); // 把json数组转换成json字符串存到数据库\n          // this.form.content = this.editor.txt.html()\n          this.$request({\n            url: this.form.id ? '/blog/update' : '/blog/add',\n            method: this.form.id ? 'PUT' : 'POST',\n            data: this.form\n          }).then(res => {\n            if (res.code === '200') {\n              // 表示成功保存\n              if (!this.form.id) {\n                // console.log(res.data)\n                this.$message.success('发布成功');\n                setTimeout(() => {\n                  location.href = \"/front/blogDetail?blogId=\" + parseInt(res.data.id);\n                }, 500);\n              } else {\n                this.$message.success('保存成功');\n                setTimeout(() => {\n                  location.href = \"/front/blogDetail?blogId=\" + this.form.id;\n                }, 500);\n              }\n            } else {\n              this.$message.error(res.msg); // 弹出错误的信息\n            }\n          });\n        }\n      });\n    },\n\n    handleCoverSuccess(res) {\n      this.form.cover = res.data;\n    },\n    setRichText() {\n      this.$nextTick(() => {\n        this.editor = new E(`#editor`);\n        this.editor.highlight = hljs;\n        this.editor.config.uploadImgServer = 'http://127.0.0.1:9090' + '/files/editor/upload';\n        this.editor.config.uploadFileName = 'file';\n        this.editor.config.uploadImgHeaders = {\n          token: this.user.token\n        };\n        this.editor.config.uploadImgParams = {\n          type: 'img'\n        };\n        this.editor.config.zIndex = 0;\n        this.editor.create(); // 创建\n      });\n    },\n\n    // 绑定@imgAdd event\n    imgAdd(pos, $file) {\n      let $vm = this.$refs.md;\n      // 第一步.将图片上传到服务器.\n      const formData = new FormData();\n      formData.append('file', $file);\n      axios({\n        url: 'http://127.0.0.1:9090/files/editor/upload',\n        method: 'post',\n        data: formData,\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      }).then(res => {\n        // 在Markdown文本中插入图片\n        var url = res.data.data[0].url;\n        // console.log(url)\n        // const markdownText = `http://127.0.0.1:9090/files/1705996022610-头像.jpg`;\n        $vm.$img2Url(pos, url);\n      });\n    }\n  }\n};","map":{"version":3,"names":["hljs","axios","Footer","markdownIt","mavonEditor","components","name","data","form","user","JSON","parse","localStorage","getItem","rules","tagsArr","categoryList","editor","blogId","$route","query","mounted","$request","get","then","res","id","tags","methods","generateCover","canvas","$refs","coverCanvas","context","getContext","clearRect","width","height","font","fillStyle","fillText","imageDataURL","toDataURL","cover","uploadGeneratedImage","imageData","split","binaryImageData","atob","arrayBuffer","ArrayBuffer","length","uint8Array","Uint8Array","i","charCodeAt","formData","FormData","append","Blob","type","post","headers","token","response","console","log","catch","error","save","formRef","validate","valid","stringify","url","method","code","$message","success","setTimeout","location","href","parseInt","msg","handleCoverSuccess","setRichText","$nextTick","E","highlight","config","uploadImgServer","uploadFileName","uploadImgHeaders","uploadImgParams","zIndex","create","imgAdd","pos","$file","$vm","md","$img2Url"],"sources":["src/views/front/NewBlog.vue"],"sourcesContent":["<template>\r\n  <div style=\"width: 50%; margin: 5px auto\">\r\n    <div class=\"card\" style=\"margin-bottom: 100px\">\r\n      <div style=\"font-weight: bold; font-size: 24px; margin-bottom: 50px\">发表新博客/编辑博客</div>\r\n      <el-form :model=\"form\" label-width=\"100px\" style=\"padding-right: 50px\" :rules=\"rules\" ref=\"formRef\">\r\n        <el-form-item label=\"标题\" prop=\"title\">\r\n          <el-input v-model=\"form.title\" placeholder=\"标题\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"简介\" prop=\"descr\">\r\n          <el-input type=\"textarea\" v-model=\"form.descr\" placeholder=\"简介\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"封面\" prop=\"cover\">\r\n          <el-upload\r\n              :action=\"'http://127.0.0.1:9090' + '/files/upload'\"\r\n              :headers=\"{ token: user.token }\"\r\n              list-type=\"picture\"\r\n              :on-success=\"handleCoverSuccess\"\r\n          >\r\n\r\n            <el-button type=\"primary\">上传封面</el-button>\r\n          </el-upload>\r\n\r\n          <el-button type=\"primary\" @click=\"generateCover\">生成封面</el-button>\r\n\r\n\r\n          <canvas ref=\"coverCanvas\" width=\"300\" height=\"150\"></canvas>\r\n        </el-form-item>\r\n        <el-form-item label=\"分类\" prop=\"categoryId\">\r\n          <el-select v-model=\"form.categoryId\" style=\"width: 100%\">\r\n            <el-option v-for=\"item in categoryList\" :key=\"item.id\" :value=\"item.id\" :label=\"item.name\"></el-option>\r\n          </el-select>\r\n        </el-form-item>\r\n        <el-form-item label=\"标签\" prop=\"tags\">\r\n          <el-select v-model=\"tagsArr\" multiple filterable allow-create default-first-option style=\"width: 100%\">\r\n            <el-option value=\"Java\"></el-option>\r\n            <el-option value=\"Docker\"></el-option>\r\n            <el-option value=\"Redis\"></el-option>\r\n            <el-option value=\"Mysql\"></el-option>\r\n            <el-option value=\"SpingBoot\"></el-option>\r\n            <el-option value=\"vue\"></el-option>\r\n            <el-option value=\"LeetCode\"></el-option>\r\n            <el-option value=\"算法\"></el-option>\r\n<!--            <el-option value=\"小白\"></el-option>-->\r\n          </el-select>\r\n        </el-form-item>\r\n<!--        <el-form-item label=\"内容\" prop=\"content\">-->\r\n<!--          <div id=\"editor\"></div>-->\r\n<!--        </el-form-item>-->\r\n<!--        style=\"height: 200px\"-->\r\n        <el-form-item label=\"文章内容\" prop=\"content\" style=\"max-height: 300px; overflow-y: auto\">\r\n          <mavon-editor ref=\"md\" v-model=\"form.content\" :ishljs=\"true\" @imgAdd=\"imgAdd\"/>\r\n        </el-form-item>\r\n\r\n\r\n      </el-form>\r\n      <div style=\"text-align: center\"><el-button type=\"primary\" size=\"medium\" style=\"width: 100px\" @click=\"save\">保 存</el-button></div>\r\n\r\n    </div>\r\n\r\n    <Footer />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// import E from \"wangeditor\";\r\nimport hljs from \"highlight.js\";\r\nimport axios from \"axios\";\r\nimport Footer from \"@/components/Footer\";\r\nimport markdownIt from 'markdown-it';\r\nimport mavonEditor from 'mavon-editor';\r\n\r\n\r\nexport default {\r\n  components: {\r\n    Footer\r\n  },\r\n  name: \"NewBlog\",\r\n  data() {\r\n    return {\r\n      form: {},\r\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\r\n      rules: {},\r\n      tagsArr: [],\r\n      categoryList: [],\r\n      editor: null,\r\n      blogId: this.$route.query.blogId\r\n    }\r\n  },\r\n  mounted() {\r\n\r\n    this.$request.get('/category/selectAll').then(res => {\r\n      this.categoryList = res.data || []\r\n    })\r\n\r\n    this.$request.get('/blog/selectById/' + this.blogId).then(res => {\r\n      this.form = res.data || {}\r\n      if (this.form.id) {\r\n        this.tagsArr = JSON.parse(this.form.tags || '[]')\r\n        // setTimeout(() => {\r\n        //   this.editor.txt.html(this.form.content)\r\n        // }, 0)\r\n      }\r\n    })\r\n    // this.setRichText()\r\n  },\r\n  methods: {\r\n\r\n    generateCover() {\r\n      const canvas = this.$refs.coverCanvas;\r\n      const context = canvas.getContext(\"2d\");\r\n\r\n      // 清空画布\r\n      context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n      // 添加标签文本\r\n      context.font = \"20px Arial\";\r\n      context.fillStyle = \"#000000\";\r\n      context.fillText(`#考研`, 10, 30);\r\n\r\n      // 将生成的图片保存为DataURL\r\n      const imageDataURL = canvas.toDataURL(\"image/png\");\r\n\r\n      // 更新表单中的封面数据\r\n      this.form.cover = imageDataURL;\r\n\r\n      // 上传生成的图片到服务器\r\n      this.uploadGeneratedImage(imageDataURL);\r\n    },\r\n\r\n\r\n    uploadGeneratedImage(imageDataURL) {\r\n      // 从生成的图片数据中提取实际的图片二进制数据\r\n      const imageData = imageDataURL.split(',')[1];\r\n      const binaryImageData = atob(imageData);\r\n      const arrayBuffer = new ArrayBuffer(binaryImageData.length);\r\n      const uint8Array = new Uint8Array(arrayBuffer);\r\n\r\n      for (let i = 0; i < binaryImageData.length; i++) {\r\n        uint8Array[i] = binaryImageData.charCodeAt(i);\r\n      }\r\n\r\n      // 创建一个 FormData 对象，并添加生成的图片数据\r\n      const formData = new FormData();\r\n      formData.append('coverImage', new Blob([arrayBuffer], { type: 'image/png' }));\r\n\r\n      // 使用 Axios 发送 POST 请求\r\n      axios.post('http://127.0.0.1:9090/files/upload', formData, {\r\n        headers: {\r\n          'Authorization': 'Bearer ' + this.user.token,\r\n          // 添加其他需要的请求头\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      })\r\n          .then(response => {\r\n            // 处理服务器返回的数据\r\n\r\n            console.log('Server response:', response.data);\r\n          })\r\n          .catch(error => {\r\n            // 处理错误\r\n            console.error('Error uploading image:', error);\r\n          });\r\n    },\r\n\r\n    save() {   // 保存按钮触发的逻辑  它会触发新增或者更新\r\n      this.$refs.formRef.validate((valid) => {\r\n        if (valid) {\r\n          this.form.tags = JSON.stringify(this.tagsArr)  // 把json数组转换成json字符串存到数据库\r\n          // this.form.content = this.editor.txt.html()\r\n          this.$request({\r\n            url: this.form.id ? '/blog/update' : '/blog/add',\r\n            method: this.form.id ? 'PUT' : 'POST',\r\n            data: this.form\r\n          }).then(res => {\r\n            if (res.code === '200') {  // 表示成功保存\r\n              if(!this.form.id){\r\n                // console.log(res.data)\r\n                this.$message.success('发布成功')\r\n                setTimeout(() => {\r\n                  location.href = \"/front/blogDetail?blogId=\"+parseInt(res.data.id)\r\n                },500)\r\n              }else{\r\n                this.$message.success('保存成功')\r\n                setTimeout(() => {\r\n                  location.href = \"/front/blogDetail?blogId=\"+this.form.id\r\n                }, 500)\r\n              }\r\n            } else {\r\n              this.$message.error(res.msg)  // 弹出错误的信息\r\n            }\r\n          })\r\n        }\r\n      })\r\n    },\r\n    handleCoverSuccess(res) {\r\n      this.form.cover = res.data\r\n    },\r\n    setRichText() {\r\n      this.$nextTick(() => {\r\n        this.editor = new E(`#editor`)\r\n        this.editor.highlight = hljs\r\n        this.editor.config.uploadImgServer = 'http://127.0.0.1:9090' + '/files/editor/upload'\r\n        this.editor.config.uploadFileName = 'file'\r\n        this.editor.config.uploadImgHeaders = {\r\n          token: this.user.token\r\n        }\r\n        this.editor.config.uploadImgParams = {\r\n          type: 'img',\r\n        }\r\n        this.editor.config.zIndex = 0\r\n        this.editor.create()  // 创建\r\n      })\r\n    },\r\n    // 绑定@imgAdd event\r\n      imgAdd(pos, $file) {\r\n      let $vm = this.$refs.md\r\n      // 第一步.将图片上传到服务器.\r\n      const formData = new FormData();\r\n      formData.append('file', $file);\r\n      axios({\r\n        url: 'http://127.0.0.1:9090/files/editor/upload',\r\n        method: 'post',\r\n        data: formData,\r\n        headers: {'Content-Type': 'multipart/form-data'},\r\n      }).then((res) => {\r\n        // 在Markdown文本中插入图片\r\n        var url = res.data.data[0].url\r\n        // console.log(url)\r\n        // const markdownText = `http://127.0.0.1:9090/files/1705996022610-头像.jpg`;\r\n        $vm.$img2Url(pos, url);\r\n      })\r\n    },\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n/* 根据需要调整高度 */\r\n.el-form-item__content .mavon-editor {\r\n  max-height: 300px !important;\r\n  overflow-y: auto !important; /* 添加垂直滚动条 */\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}