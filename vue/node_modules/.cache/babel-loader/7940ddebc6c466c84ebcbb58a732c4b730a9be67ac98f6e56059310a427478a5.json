{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport request from \"@/utils/request\";\nimport emojis from \"@/assets/emoji\";\nlet client;\nexport default {\n  data() {\n    return {\n      user: {},\n      permission: [],\n      emojis: [],\n      messages: [],\n      users: {},\n      fromUser: '',\n      // 当前用户\n      toUser: '',\n      toAvatar: '',\n      unRead: {},\n      toUserName: '',\n      timeIntervalThreshold: 3 * 60 * 1000\n    };\n  },\n  computed: {\n    groupedMessages() {\n      const grouped = {};\n      this.messages.forEach(item => {\n        const date = item.time.split(' ')[0]; // 提取日期部分\n        if (!grouped[date]) {\n          grouped[date] = [];\n        }\n        grouped[date].push(item);\n      });\n      return grouped;\n    }\n  },\n  // 页面加载的时候，做一些事情，在created里面\n  mounted() {\n    this.emojis = emojis.split(',');\n    this.user = JSON.parse(localStorage.getItem('xm-user') || \"{}\");\n    this.fromUser = this.user.id;\n    this.fromUser = this.fromUser + \"\";\n    // 字符串存储\n    let id = this.user?.id.toString();\n    client = new WebSocket(`ws://127.0.0.1:9090/imserverSingle/${id}`);\n    client.onopen = () => {\n      console.log('websocket open');\n    };\n    client.onclose = () => {\n      // 页面刷新的时候和后台websocket服务关闭的时候\n      console.log('websocket close');\n    };\n    client.onmessage = msg => {\n      //WebSocket 对象的事件监听器，用于处理从服务器接收到的消息。\n      if (msg.data) {\n        // 检查接收到的消息是否存在。\n        let json = JSON.parse(msg.data);\n        if (json.users && json.users.length) {\n          this.loadOnline();\n          return;\n        }\n        if (json.touser === this.fromUser.toString()) {\n          this.loadOnline();\n        }\n        if (json.content && json.fromuser === this.fromUser.toString() && json.touser === this.toUser.toString() || json.touser === this.fromUser.toString() && json.fromuser === this.toUser.toString()) {\n          // 说明是两者互相发消息\n          this.messages.push(json); //放到消息队列里\n          this.scrollToBottom(); // 滚动页面到最底部\n          this.loadOnline();\n        }\n        // 加载消息数字 两者通信如果是对面发来的消息 说明当前正在两个人的通信窗口\n        if (this.toUser.toString() === json.fromuser) {\n          this.setUnReadNums(); // 把对方消息设为已读,更新未读消息数量\n          this.loadOnline();\n        } else {\n          //用户发给对方的\n          // 可能是当前用户发给对方的消息，或者是其他人通信 都 加载当前用户的未读消息数量 每次监听到通信事件就更新未读记录\n          this.loadUnReadNums();\n          this.loadOnline();\n        }\n      }\n    };\n\n    // 加载聊天数据\n    this.load();\n    request.get('/user/selectAllOnline?userId=' + this.user.id.toString()).then(res => {\n      //过滤掉自己就可以 //实时刷新\n      res.data = res.data.filter(v => v.id !== this.user.id);\n      this.$set(this.users, 'USER', res.data);\n    });\n  },\n  // Vue实例销毁之前执行  释放资源\n  beforeDestroy() {\n    if (client) {\n      client.close();\n    }\n  },\n  // 定义一些页面上控件出发的事件调用的方法\n  methods: {\n    //\n    shouldDisplayTime(index, group) {\n      if (index === 0) {\n        return true;\n      }\n      const currentTime = new Date(group[index].time).getTime();\n      const prevTime = new Date(group[index - 1].time).getTime();\n      return currentTime - prevTime > this.timeIntervalThreshold;\n    },\n    load() {\n      request.get('/imsingle?fromUser=' + this.fromUser.toString() + '&toUser=' + this.toUser.toString()).then(res => {\n        // console.log(res)\n        if (res.code === '200') {\n          //把对方消息设为已读 这是两者的消息传递\n          this.messages = res.data;\n          this.scrollToBottom(); // 滚动条滚动到最底部\n        } else {\n          this.$notify.error(res.msg);\n        }\n        this.loadUnReadNums();\n      });\n    },\n    // 查询两个人的所有消息 同时把 对方 的消息设为已读\n    setUnReadNums() {\n      request.get('/imsingle?fromUser=' + this.fromUser.toString() + '&toUser=' + this.toUser.toString()).then(res => {\n        this.loadUnReadNums();\n      });\n    },\n    // 查询当前用户的所有未读数量并标记\n    loadUnReadNums() {\n      request.get('/imsingle/unReadNums?toUsername=' + this.fromUser.toString()).then(res => {\n        this.unRead = res.data;\n        // console.log(this.unRead)STUDENT_池:2\n      });\n    },\n\n    //查询所有的在线人数\n    loadOnline() {\n      // 查询用户是否在线\n      // '/imsingle/unReadNums?toUsername=' + this.fromUser.toString()\n      request.get('/user/selectAllOnline?userId=' + this.user.id.toString()).then(res => {\n        //过滤掉自己就可以 //实时刷新\n        res.data = res.data.filter(v => v.id !== this.user.id);\n        this.$set(this.users, 'USER', res.data);\n      });\n    },\n    //发送消息\n    send() {\n      let inputBox = document.getElementById('im-content'); //输入框输入的东西进行获取\n      const content = inputBox.textContent.trim(); // 使用 trim() 去除两端空白字符\n\n      if (content.length === 0) {\n        this.$notify.error('请输入聊天内容!');\n        return;\n      } else if (content.length > 150) {\n        this.$notify.error('字数超过150，请重新输入!');\n        return;\n      }\n      if (!this.toUser) {\n        this.$notify.error('请选择聊天用户');\n        return;\n      }\n      if (client) {\n        let message = this.getMessage('text');\n        client.send(JSON.stringify(message));\n      }\n      document.getElementById('im-content').innerHTML = ''; // 清空输入框\n    },\n\n    //选择对方并查询两个人的所有消息 同时把 对方 的消息设为已读 更新所有未读记录\n    selectToUser(item) {\n      if (this.user.id.toString === '666') {\n        this.$notify.error(\"访客无权查看，请注册！！！\");\n        return;\n      }\n      //设置发送的人以及对方的头像\n      this.toUserName = item.name;\n      this.toUser = item.id;\n      this.toAvatar = item.avatar;\n      //查询聊天记录 同时把对方消息的设为已读\n      this.load();\n    },\n    //下载文件\n    download(file) {\n      window.open(file);\n    },\n    //发送的信息\n    getMessage(type) {\n      let inputBox = document.getElementById('im-content'); //输入框输入的东西进行获取\n      const content = inputBox.innerHTML;\n      if (!content && type === 'text') {\n        //没有聊天内容\n        this.$notify.error('请输入聊天内容');\n        return;\n      }\n      return {\n        fromuser: this.fromUser,\n        //自己\n        fromavatar: this.user.avatar,\n        touser: this.toUser,\n        toavatar: this.toAvatar,\n        content: content,\n        type: type\n      };\n    },\n    // 设置文件类型 是图片还是文件 发送文件\n    handleFile(file) {\n      if (client) {\n        let message = this.getMessage('img');\n        message.content = file.data;\n        //这是一个地址\n        let extName = file.data.substring(file.data.lastIndexOf('.') + 1);\n        if (['png', 'jpg', 'jpeg', 'gif', 'bmp', 'tiff', 'svg', 'webp', 'jfif'].includes(extName)) {\n          message.type = 'img';\n        } else {\n          message.type = 'file';\n        }\n        client.send(JSON.stringify(message));\n      }\n    },\n    //设置发送的表情\n    clickEmoji(emoji) {\n      document.getElementById('im-content').innerHTML += emoji;\n    },\n    //滚动到最底部\n    scrollToBottom() {\n      this.$nextTick(() => {\n        // 设置聊天滚动条到底部\n        let imMessageBox = document.getElementsByClassName(\"im-message-box\")[0];\n        //设置滚动条到最底部\n        imMessageBox.scrollTop = imMessageBox.scrollHeight;\n        console.log('触发滚动');\n      });\n    }\n  }\n};","map":{"version":3,"names":["request","emojis","client","data","user","permission","messages","users","fromUser","toUser","toAvatar","unRead","toUserName","timeIntervalThreshold","computed","groupedMessages","grouped","forEach","item","date","time","split","push","mounted","JSON","parse","localStorage","getItem","id","toString","WebSocket","onopen","console","log","onclose","onmessage","msg","json","length","loadOnline","touser","content","fromuser","scrollToBottom","setUnReadNums","loadUnReadNums","load","get","then","res","filter","v","$set","beforeDestroy","close","methods","shouldDisplayTime","index","group","currentTime","Date","getTime","prevTime","code","$notify","error","send","inputBox","document","getElementById","textContent","trim","message","getMessage","stringify","innerHTML","selectToUser","name","avatar","download","file","window","open","type","fromavatar","toavatar","handleFile","extName","substring","lastIndexOf","includes","clickEmoji","emoji","$nextTick","imMessageBox","getElementsByClassName","scrollTop","scrollHeight"],"sources":["src/views/front/ImSingle.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div  class=\"main-body-content center-container\" style=\"margin-left: 400px;margin-top: 50px;\">\r\n      <div style=\"display: flex; align-items: flex-start;\" >\r\n        <!--        125px-->\r\n        <div style=\"width: 240px; border: 1px solid #000b17; border-radius: 5px; height: calc(50vh + 125px);\">\r\n          <div class=\"header\">论坛用户</div>\r\n          <!--          学生框-->\r\n          <div class=\"user-list-box\" style=\"height:calc(50vh + 125px - 42px);overflow-y: scroll;background-color: #f0f0f0\">\r\n\r\n\r\n            <div class=\"user-list-item\" v-for=\"item in users.USER\" @click=\"selectToUser(item)\">\r\n              <img :src=\"item.avatar\" :class=\"{ online: item.info === '在线', offline: item.info === '离线' }\">\r\n              <span style=\"flex: 1; margin-left: 10px;font-size: 16px\" :style=\"{ color: item.id.toString() === toUser.toString() ? '#3a8ee6' :''} \">\r\n              {{ item.name }}\r\n                <span v-if=\"item.info === '在线'\" style=\"color: #4CAF50;\">在线</span>\r\n                <span v-else style=\"color: gray;\">离线</span>\r\n             </span>\r\n\r\n              <div class=\"user-list-item-badge\" v-if=\"unRead?.[item.id ]\">{{ unRead?.[item.id ] }}</div>\r\n              <!--              表示未读数量-->\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <!--  中间部分  -->\r\n        <div style=\"width: 50%; border: 1px solid #ddd; border-radius: 5px; background-color: #f1f1f1; margin: 0 10px;\">\r\n          <div style=\"padding: 20px 0; text-align: center; border-bottom: 1px solid #ddd; color: #000; background-color: #eee; height: 60px\">\r\n            {{ toUserName }}\r\n          </div>\r\n          <div class=\"im-message-box\">\r\n            <!--            遍历整个聊天记录-->\r\n            <div v-for=\"(group, date) in groupedMessages\" :key=\"date\">\r\n              <div v-for=\"(item, index) in group\" :key=\"index\">\r\n                <div v-if=\"index === 0\" style=\"text-align: center;font-weight: bold;margin-bottom: 5px\">{{ date }}</div>\r\n                <div v-if=\"shouldDisplayTime(index, group)\">\r\n                  <div style=\"text-align: center\" v-html=\"item.time\"></div>\r\n                </div>\r\n                <!--  右边的气泡   判断当前用户是不是发送者，如果是就执行这个 自己来了就执行这里-->\r\n                <div style=\"display: flex; flex-direction: row-reverse; align-items: flex-start\"\r\n                     v-if=\"item.fromuser === fromUser.toString()\">\r\n                  <!--                判断当前用户是不是发送者，如果是就执行这个-->\r\n                  <img :src=\"item.fromavatar\" alt=\"\"\r\n                       style=\"width: 40px; height: 40px; border-radius: 50%; margin-left: 10px\">\r\n\r\n\r\n                  <div class=\"im-message im-message-right\" v-html=\"item.content\"\r\n                       v-if=\"item.type === 'text'\"></div>\r\n                  <div class=\"im-message\" style=\"padding: 0\" v-if=\"item.type === 'img'\">\r\n                    <!-- 注意  el-image 的load函数必须加上，否则无法触发滚动条到最底端 -->\r\n                    <el-image style=\"width: 100px\" :src=\"item.content\" alt=\"\"\r\n                              :preview-src-list=[item.content] @load=\"scrollToBottom\"></el-image>\r\n                  </div>\r\n                  <!--                发送的是文件-->\r\n                  <div class=\"im-message im-message-download\" v-if=\"item.type === 'file'\"\r\n                       @click=\"download(item.content)\">\r\n                    <div><i class=\"el-icon-folder-opened\"></i>\r\n                      <span>{{ item.content.substring(item.content.indexOf('-') + 1) }}</span>\r\n                    </div>\r\n                  </div>\r\n\r\n                </div>\r\n\r\n                <!--  左边的气泡 -->\r\n                <!--             v-else说明两个互斥的接收者 -->\r\n                <div style=\"display: flex; align-items: flex-start\" v-else>\r\n                  <!--                头像-->\r\n                  <img :src=\"item.fromavatar\" alt=\"\"\r\n                       style=\"width: 40px; height: 40px; border-radius: 50%; margin-right: 10px\">\r\n                  <div style=\"width: 100%\">\r\n                    <div style=\"color: #888; font-size: 12px; width: 50%\">\r\n                      <!--                    内容左侧人名-->\r\n                      {{ toUserName }}\r\n                    </div>\r\n                    <!--                  发送的是文字-->\r\n                    <div class=\"im-message im-message-left\"  v-html=\"item.content\"\r\n                         v-if=\"item.type === 'text'\"></div>\r\n                    <!--                  发送的是图片-->\r\n                    <div class=\"im-message\" style=\"padding: 0\" v-if=\"item.type === 'img'\">\r\n                      <!-- 注意  el-image 的load函数必须加上，否则无法触发滚动条到最底端 -->\r\n                      <el-image style=\"width: 100px\" :src=\"item.content\" alt=\"\"\r\n                                :preview-src-list=[item.content]\r\n                                @load=\"scrollToBottom\"></el-image>\r\n                    </div>\r\n                    <!--                  发送的是文件的话-->\r\n                    <div class=\"im-message im-message-download\" v-if=\"item.type === 'file'\"\r\n                         @click=\"download(item.content)\">\r\n                      <div><i class=\"el-icon-folder-opened\"></i>\r\n                        <span>{{ item.content.substring(item.content.indexOf('-') + 1) }}</span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- 输入区域 -->\r\n          <div style=\"padding: 10px 5px; border-top: 1px solid #ddd; display: flex; align-items: center; width: 100%;\">\r\n            <!--            表情包-->\r\n            <el-popover placement=\"top\" width=\"300\" trigger=\"click\">\r\n              <div class=\"emoji-box\">\r\n                <span v-for=\"(item, index) in emojis\" :key=\"index\"\r\n                      style=\"margin-right: 5px; font-size: 20px; cursor: pointer\" v-html=\"item\"\r\n                      @click=\"clickEmoji(item)\">\r\n                </span>\r\n              </div>\r\n              <i slot=\"reference\" class=\"fa fa-smile-o\" style=\"font-size: 22px; color: #666;\"></i>\r\n            </el-popover>\r\n            <!--            上传图片文件-->\r\n            <div style=\"margin-left: 5px\">\r\n              <el-upload action=\"http://127.0.0.1:9090/files/upload\" :show-file-list=\"false\" :on-success=\"handleFile\">\r\n                <i class=\"fa fa-folder-open-o\" style=\"font-size: 20px; color: #666;\"></i>\r\n              </el-upload>\r\n            </div>\r\n            <!--输入框-->\r\n            <div\r\n                id=\"im-content\"\r\n                contenteditable\r\n                @keydown.enter.prevent\r\n                @keyup.enter=\"send\"\r\n                style=\"flex: 1; background-color: #fff; margin: 0 5px;max-height: 50px;overflow-y: auto;padding: 10px; border: 1px solid #ddd; border-radius: 2px; outline: none; font-size: 18px;\"\r\n            ></div>\r\n            <el-button type=\"primary\" @click=\"send\" style=\"border: none\">发送</el-button>\r\n\r\n          </div>\r\n\r\n        </div>\r\n        <!--  中间部分结束  -->\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n\r\n</template>\r\n\r\n<script>\r\nimport request from \"@/utils/request\";\r\nimport emojis from \"@/assets/emoji\";\r\n\r\nlet client\r\nexport default {\r\n  data() {\r\n    return {\r\n      user: {},\r\n      permission: [],\r\n      emojis: [],\r\n      messages: [],\r\n      users: {},\r\n      fromUser: '',// 当前用户\r\n      toUser: '',\r\n      toAvatar: '',\r\n      unRead: {},\r\n      toUserName:'',\r\n      timeIntervalThreshold: 3 * 60 * 1000\r\n    }\r\n  },\r\n  computed:{\r\n    groupedMessages() {\r\n      const grouped = {};\r\n      this.messages.forEach(item => {\r\n        const date = item.time.split(' ')[0]; // 提取日期部分\r\n        if (!grouped[date]) {\r\n          grouped[date] = [];\r\n        }\r\n        grouped[date].push(item);\r\n      });\r\n      return grouped;\r\n    },\r\n  },\r\n\r\n  // 页面加载的时候，做一些事情，在created里面\r\n  mounted() {\r\n    this.emojis = emojis.split(',')\r\n    this.user = JSON.parse(localStorage.getItem('xm-user') || \"{}\")\r\n\r\n    this.fromUser = this.user.id\r\n    this.fromUser = this.fromUser + \"\"\r\n    // 字符串存储\r\n    let id = this.user?.id.toString();\r\n    client = new WebSocket(`ws://127.0.0.1:9090/imserverSingle/${id}`)\r\n    client.onopen = () => {\r\n      console.log('websocket open')\r\n    }\r\n    client.onclose = () => {  // 页面刷新的时候和后台websocket服务关闭的时候\r\n      console.log('websocket close')\r\n    }\r\n    client.onmessage = (msg) => { //WebSocket 对象的事件监听器，用于处理从服务器接收到的消息。\r\n      if (msg.data) { // 检查接收到的消息是否存在。\r\n        let json = JSON.parse(msg.data)\r\n        if (json.users && json.users.length){\r\n          this.loadOnline();\r\n          return\r\n        }\r\n      if(json.touser === this.fromUser.toString()){\r\n        this.loadOnline();\r\n      }\r\n        if (json.content && (json.fromuser === this.fromUser.toString() && json.touser === this.toUser.toString())\r\n            || json.touser === this.fromUser.toString() && json.fromuser === this.toUser.toString()) {  // 说明是两者互相发消息\r\n          this.messages.push(json) //放到消息队列里\r\n          this.scrollToBottom()  // 滚动页面到最底部\r\n          this.loadOnline();\r\n        }\r\n        // 加载消息数字 两者通信如果是对面发来的消息 说明当前正在两个人的通信窗口\r\n        if (this.toUser.toString() === json.fromuser) {\r\n          this.setUnReadNums()  // 把对方消息设为已读,更新未读消息数量\r\n          this.loadOnline();\r\n        } else {  //用户发给对方的\r\n          // 可能是当前用户发给对方的消息，或者是其他人通信 都 加载当前用户的未读消息数量 每次监听到通信事件就更新未读记录\r\n          this.loadUnReadNums()\r\n          this.loadOnline();\r\n        }\r\n      }\r\n    }\r\n\r\n    // 加载聊天数据\r\n    this.load()\r\n\r\n    request.get('/user/selectAllOnline?userId='+ this.user.id.toString()).then(res => {\r\n      //过滤掉自己就可以 //实时刷新\r\n      res.data = res.data.filter(v => v.id  !== this.user.id )\r\n      this.$set(this.users, 'USER', res.data)\r\n    })\r\n\r\n\r\n  },\r\n  // Vue实例销毁之前执行  释放资源\r\n  beforeDestroy() {\r\n    if (client) {\r\n      client.close()\r\n    }\r\n  },\r\n  // 定义一些页面上控件出发的事件调用的方法\r\n  methods: {\r\n    //\r\n    shouldDisplayTime(index, group) {\r\n      if (index === 0) {\r\n        return true;\r\n      }\r\n      const currentTime = new Date(group[index].time).getTime();\r\n      const prevTime = new Date(group[index - 1].time).getTime();\r\n      return currentTime - prevTime > this.timeIntervalThreshold;\r\n    },\r\n    load() {\r\n      request.get('/imsingle?fromUser=' + this.fromUser.toString() + '&toUser=' + this.toUser.toString()).then(res => {\r\n        // console.log(res)\r\n        if (res.code === '200') {\r\n          //把对方消息设为已读 这是两者的消息传递\r\n          this.messages = res.data\r\n          this.scrollToBottom()  // 滚动条滚动到最底部\r\n        } else {\r\n           this.$notify.error(res.msg)\r\n        }\r\n        this.loadUnReadNums()\r\n      })\r\n    },\r\n    // 查询两个人的所有消息 同时把 对方 的消息设为已读\r\n    setUnReadNums() {\r\n      request.get('/imsingle?fromUser=' + this.fromUser.toString() + '&toUser=' + this.toUser.toString()).then(res => {\r\n        this.loadUnReadNums()\r\n      })\r\n    },\r\n    // 查询当前用户的所有未读数量并标记\r\n    loadUnReadNums() {\r\n      request.get('/imsingle/unReadNums?toUsername=' + this.fromUser.toString()).then(res => {\r\n        this.unRead = res.data\r\n        // console.log(this.unRead)STUDENT_池:2\r\n      })\r\n    },\r\n    //查询所有的在线人数\r\n    loadOnline(){\r\n      // 查询用户是否在线\r\n      // '/imsingle/unReadNums?toUsername=' + this.fromUser.toString()\r\n      request.get('/user/selectAllOnline?userId='+ this.user.id.toString()).then(res => {\r\n        //过滤掉自己就可以 //实时刷新\r\n        res.data = res.data.filter(v => v.id  !== this.user.id )\r\n        this.$set(this.users, 'USER', res.data)\r\n      })\r\n    },\r\n\r\n    //发送消息\r\n    send() {\r\n      let inputBox = document.getElementById('im-content') //输入框输入的东西进行获取\r\n      const content = inputBox.textContent.trim(); // 使用 trim() 去除两端空白字符\r\n\r\n      if (content.length === 0) {\r\n        this.$notify.error('请输入聊天内容!');\r\n        return;\r\n      } else if (content.length > 150) {\r\n        this.$notify.error('字数超过150，请重新输入!');\r\n        return;\r\n      }\r\n\r\n\r\n      if (!this.toUser) {\r\n        this.$notify.error('请选择聊天用户')\r\n        return\r\n      }\r\n      if (client) {\r\n        let message = this.getMessage('text')\r\n        client.send(JSON.stringify(message))\r\n      }\r\n      document.getElementById('im-content').innerHTML = ''  // 清空输入框\r\n    },\r\n    //选择对方并查询两个人的所有消息 同时把 对方 的消息设为已读 更新所有未读记录\r\n    selectToUser(item) {\r\n      if(this.user.id.toString === '666'){\r\n        this.$notify.error(\"访客无权查看，请注册！！！\")\r\n        return\r\n      }\r\n      //设置发送的人以及对方的头像\r\n      this.toUserName = item.name\r\n      this.toUser = item.id \r\n      this.toAvatar = item.avatar\r\n      //查询聊天记录 同时把对方消息的设为已读\r\n      this.load()\r\n    },\r\n    //下载文件\r\n    download(file) {\r\n      window.open(file)\r\n    },\r\n    //发送的信息\r\n    getMessage(type) {\r\n      let inputBox = document.getElementById('im-content') //输入框输入的东西进行获取\r\n      const content = inputBox.innerHTML\r\n      if (!content && type === 'text') { //没有聊天内容\r\n        this.$notify.error('请输入聊天内容')\r\n        return\r\n      }\r\n      return {\r\n        fromuser: this.fromUser,//自己\r\n        fromavatar: this.user.avatar,\r\n        touser: this.toUser,\r\n        toavatar: this.toAvatar,\r\n        content: content,\r\n        type: type\r\n      }\r\n    },\r\n    // 设置文件类型 是图片还是文件 发送文件\r\n    handleFile(file) {\r\n      if (client) {\r\n        let message = this.getMessage('img')\r\n        message.content = file.data\r\n        //这是一个地址\r\n        let extName = file.data.substring(file.data.lastIndexOf('.') + 1)\r\n        if (['png', 'jpg', 'jpeg', 'gif', 'bmp', 'tiff', 'svg', 'webp','jfif'].includes(extName)) {\r\n          message.type = 'img'\r\n        } else {\r\n          message.type = 'file'\r\n        }\r\n        client.send(JSON.stringify(message))\r\n      }\r\n    },\r\n    //设置发送的表情\r\n    clickEmoji(emoji) {\r\n      document.getElementById('im-content').innerHTML += emoji\r\n    },\r\n    //滚动到最底部\r\n    scrollToBottom() {\r\n      this.$nextTick(() => {\r\n        // 设置聊天滚动条到底部\r\n        let imMessageBox = document.getElementsByClassName(\"im-message-box\")[0]\r\n        //设置滚动条到最底部\r\n        imMessageBox.scrollTop = imMessageBox.scrollHeight\r\n        console.log('触发滚动')\r\n      })\r\n    },\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n</script>\r\n\r\n\r\n\r\n\r\n<style scoped>\r\n.im-message-box {\r\n  height: 50vh;\r\n  padding: 10px;\r\n  overflow-y: auto;\r\n  background-color: white;\r\n}\r\n\r\n.emoji-box {\r\n  height: 200px;\r\n  overflow-y: scroll;\r\n  line-height: 30px;\r\n}\r\n\r\n.user-list-box {\r\n  overflow-y: auto;\r\n}\r\n\r\n.im-message-box::-webkit-scrollbar, .emoji-box::-webkit-scrollbar, .user-list-box::-webkit-scrollbar {\r\n  width: 4px;\r\n}\r\n\r\n.im-message-box::-webkit-scrollbar-thumb, .emoji-box::-webkit-scrollbar-thumb, .user-list-box::-webkit-scrollbar-thumb {\r\n  border-radius: 10px;\r\n  background: rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.im-message-box::-webkit-scrollbar-track, .emoji-box::-webkit-scrollbar-track, .user-list-box::-webkit-scrollbar-track {\r\n  border-radius: 0;\r\n  background: rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.im-message {\r\n  font-size: 14px;\r\n  padding: 10px;\r\n  margin: 5px 0;\r\n  border-radius: 5px;\r\n  color: #000;\r\n  max-width: 50%;\r\n  line-height: 20px;\r\n  width: fit-content;\r\n}\r\n\r\n.im-message-left {\r\n  background-color: #fff;\r\n\r\n}\r\n\r\n.im-message-right {\r\n  background-color: #26d470;\r\n}\r\n\r\n.im-message-download {\r\n  background-color: #DBEDFF;\r\n  cursor: pointer;\r\n}\r\n\r\n.user-list-item {\r\n  display: flex;\r\n  padding: 10px;\r\n  align-items: center;\r\n  border-bottom: 1px solid #eee;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n}\r\n\r\n.user-list-item-badge {\r\n  padding: 2px 6px;\r\n  border-radius: 10px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 12px;\r\n  color: white;\r\n  background-color: red;\r\n}\r\n.header{\r\n  padding: 10px;\r\n  border-bottom: 1px solid #ddd;\r\n  color: #000;\r\n  background-color: #eee;\r\n  font-weight: bold;\r\n  text-align: center\r\n\r\n}\r\n.user-list-item:nth-last-child(1) {\r\n  border: none;\r\n}\r\n\r\n.online {\r\n  width: 30px;\r\n  height: 30px;\r\n  border-radius: 50%;\r\n  border: 2px solid #4CAF50;\r\n  background-color: #4CAF50;\r\n}\r\n\r\n.offline {\r\n  width: 30px;\r\n  height: 30px;\r\n  border-radius: 50%;\r\n  border: 2px solid #ccc;\r\n  background-color: #ccc;\r\n}\r\n\r\n.online-text {\r\n  color: #4CAF50;\r\n}\r\n\r\n.offline-text {\r\n  color: gray;\r\n}\r\n\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}