{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport request from \"@/utils/request\";\nimport emojis from \"@/assets/emoji\";\nexport default {\n  data() {\n    return {\n      user: {},\n      permission: [],\n      emojis: [],\n      messages: [],\n      users: {},\n      fromUser: '',\n      // 当前用户\n      toUser: '',\n      toAvatar: '',\n      unRead: {},\n      toUserName: '',\n      timeIntervalThreshold: 3 * 60 * 1000\n    };\n  },\n  computed: {\n    groupedMessages() {\n      const grouped = {};\n      this.messages.forEach(item => {\n        const date = item.time.split(' ')[0]; // 提取日期部分\n        if (!grouped[date]) {\n          grouped[date] = [];\n        }\n        grouped[date].push(item);\n      });\n      return grouped;\n    }\n  },\n  mounted() {\n    this.emojis = emojis.split(',');\n    this.user = JSON.parse(localStorage.getItem('xm-user') || \"{}\");\n    this.fromUser = this.user.id;\n    this.fromUser = this.fromUser + \"\";\n    // 字符串存储\n    let id = this.user?.id.toString();\n\n    // 加载聊天数据\n    this.load();\n\n    // 查询用户\n    request.get('/user/selectAllOnline').then(res => {\n      //过滤掉自己就可以 //实时刷新\n      res.data = res.data.filter(v => v.id !== this.user.id);\n      this.$set(this.users, 'USER', res.data);\n    });\n  },\n  methods: {\n    initializeWebSocket(userId) {\n      this.websocket = new WebSocket(`ws://localhost:9090/imserverSingle/${userId}`);\n      this.websocket.onopen = this.onWebSocketOpen;\n      this.websocket.onclose = this.onWebSocketClose;\n      this.websocket.onmessage = this.onWebSocketMessage;\n    },\n    onWebSocketOpen() {\n      console.log('WebSocket连接已打开');\n      // 连接成功后的逻辑，例如获取初始数据\n    },\n\n    onWebSocketClose() {\n      console.log('WebSocket连接已关闭');\n      // 连接关闭后的逻辑\n    },\n\n    onWebSocketMessage(msg) {\n      if (msg.data) {\n        // 检查接收到的消息是否存在。\n        let json = JSON.parse(msg.data);\n        if (json.users && json.users.length) {\n          this.loadOnline(json);\n          return;\n        }\n        if (json.content && json.fromuser === this.fromUser.toString() && json.touser === this.toUser.toString() || json.touser === this.fromUser.toString() && json.fromuser === this.toUser.toString()) {\n          // 说明是两者互相发消息\n          this.messages.push(json); //放到消息队列里\n          this.scrollToBottom(); // 滚动页面到最底部\n        }\n        // 加载消息数字 两者通信如果是对面发来的消息 说明当前正在两个人的通信窗口\n        if (this.toUser.toString() === json.fromuser) {\n          this.setUnReadNums(); // 把对方消息设为已读,更新未读消息数量\n        } else {\n          //用户发给对方的\n          // 可能是当前用户发给对方的消息，或者是其他人通信 都 加载当前用户的未读消息数量 每次监听到通信事件就更新未读记录\n          this.loadUnReadNums();\n        }\n      }\n      // 处理收到的WebSocket消息\n    },\n\n    shouldDisplayTime(index, group) {\n      if (index === 0) {\n        return true;\n      }\n      const currentTime = new Date(group[index].time).getTime();\n      const prevTime = new Date(group[index - 1].time).getTime();\n      return currentTime - prevTime > this.timeIntervalThreshold;\n    },\n    load() {\n      request.get('/imsingle?fromUser=' + this.fromUser.toString() + '&toUser=' + this.toUser.toString()).then(res => {\n        // console.log(res)\n        if (res.code === '200') {\n          //把对方消息设为已读 这是两者的消息传递\n          this.messages = res.data;\n          this.scrollToBottom(); // 滚动条滚动到最底部\n        } else {\n          this.$notify.error(res.msg);\n        }\n        this.loadUnReadNums();\n      });\n    },\n    // 查询两个人的所有消息 同时把 对方 的消息设为已读\n    setUnReadNums() {\n      request.get('/imsingle?fromUser=' + this.fromUser.toString() + '&toUser=' + this.toUser.toString()).then(res => {\n        this.loadUnReadNums();\n      });\n    },\n    // 查询当前用户的所有未读数量并标记\n    loadUnReadNums() {\n      request.get('/imsingle/unReadNums?toUsername=' + this.fromUser.toString()).then(res => {\n        this.unRead = res.data;\n        // console.log(this.unRead)STUDENT_池:2\n      });\n    },\n\n    //查询所有的在线人数\n    loadOnline() {\n      // 查询用户是否在线\n\n      request.get('/user/selectAllOnline').then(res => {\n        //过滤掉自己就可以 //实时刷新\n        res.data = res.data.filter(v => v.id !== this.user.id);\n        this.$set(this.users, 'USER', res.data);\n      });\n    },\n    //发送消息\n    send() {\n      if (!this.toUser) {\n        this.$notify.error('请选择聊天用户');\n        return;\n      }\n      if (client) {\n        let message = this.getMessage('text');\n        client.send(JSON.stringify(message));\n      }\n      document.getElementById('im-content').innerHTML = ''; // 清空输入框\n    },\n\n    //选择对方并查询两个人的所有消息 同时把 对方 的消息设为已读 更新所有未读记录\n    selectToUser(item) {\n      //设置发送的人以及对方的头像\n      this.toUserName = item.name;\n      this.toUser = item.id;\n      this.toAvatar = item.avatar;\n      //查询聊天记录 同时把对方消息的设为已读\n      this.load();\n    },\n    //下载文件\n    download(file) {\n      window.open(file);\n    },\n    //发送的信息\n    getMessage(type) {\n      let inputBox = document.getElementById('im-content'); //输入框输入的东西进行获取\n      const content = inputBox.innerHTML;\n      if (!content && type === 'text') {\n        //没有聊天内容\n        this.$notify.error('请输入聊天内容');\n        return;\n      }\n      return {\n        fromuser: this.fromUser,\n        //自己\n        fromavatar: this.user.avatar,\n        touser: this.toUser,\n        toavatar: this.toAvatar,\n        content: content,\n        type: type\n      };\n    },\n    // 设置文件类型 是图片还是文件 发送文件\n    handleFile(file) {\n      if (client) {\n        let message = this.getMessage('img');\n        message.content = file.data;\n        //这是一个地址\n        let extName = file.data.substring(file.data.lastIndexOf('.') + 1);\n        if (['png', 'jpg', 'jpeg', 'gif', 'bmp', 'tiff', 'svg', 'webp'].includes(extName)) {\n          message.type = 'img';\n        } else {\n          message.type = 'file';\n        }\n        client.send(JSON.stringify(message));\n      }\n    },\n    //设置发送的表情\n    clickEmoji(emoji) {\n      document.getElementById('im-content').innerHTML += emoji;\n    },\n    //滚动到最底部\n    scrollToBottom() {\n      this.$nextTick(() => {\n        // 设置聊天滚动条到底部\n        let imMessageBox = document.getElementsByClassName(\"im-message-box\")[0];\n        //设置滚动条到最底部\n        imMessageBox.scrollTop = imMessageBox.scrollHeight;\n        console.log('触发滚动');\n      });\n    }\n\n    // 其他WebSocket相关方法和逻辑\n  },\n\n  // 在组件销毁前关闭WebSocket连接\n  beforeDestroy() {\n    if (this.websocket) {\n      this.websocket.close();\n    }\n  }\n};","map":{"version":3,"names":["request","emojis","data","user","permission","messages","users","fromUser","toUser","toAvatar","unRead","toUserName","timeIntervalThreshold","computed","groupedMessages","grouped","forEach","item","date","time","split","push","mounted","JSON","parse","localStorage","getItem","id","toString","load","get","then","res","filter","v","$set","methods","initializeWebSocket","userId","websocket","WebSocket","onopen","onWebSocketOpen","onclose","onWebSocketClose","onmessage","onWebSocketMessage","console","log","msg","json","length","loadOnline","content","fromuser","touser","scrollToBottom","setUnReadNums","loadUnReadNums","shouldDisplayTime","index","group","currentTime","Date","getTime","prevTime","code","$notify","error","send","client","message","getMessage","stringify","document","getElementById","innerHTML","selectToUser","name","avatar","download","file","window","open","type","inputBox","fromavatar","toavatar","handleFile","extName","substring","lastIndexOf","includes","clickEmoji","emoji","$nextTick","imMessageBox","getElementsByClassName","scrollTop","scrollHeight","beforeDestroy","close"],"sources":["C:/Users/wcf/springboot-vue框架实操/xm-blog/vue/src/store/websocketMixin.js"],"sourcesContent":["import request from \"@/utils/request\";\r\nimport emojis from \"@/assets/emoji\";\r\n\r\nexport default {\r\n    data() {\r\n        return {\r\n            user: {},\r\n            permission: [],\r\n            emojis: [],\r\n            messages: [],\r\n            users: {},\r\n            fromUser: '',// 当前用户\r\n            toUser: '',\r\n            toAvatar: '',\r\n            unRead: {},\r\n            toUserName:'',\r\n            timeIntervalThreshold: 3 * 60 * 1000\r\n        }\r\n    },\r\n    computed:{\r\n        groupedMessages() {\r\n            const grouped = {};\r\n            this.messages.forEach(item => {\r\n                const date = item.time.split(' ')[0]; // 提取日期部分\r\n                if (!grouped[date]) {\r\n                    grouped[date] = [];\r\n                }\r\n                grouped[date].push(item);\r\n            });\r\n            return grouped;\r\n        },\r\n    },\r\n    mounted() {\r\n        this.emojis = emojis.split(',')\r\n        this.user = JSON.parse(localStorage.getItem('xm-user') || \"{}\")\r\n\r\n        this.fromUser = this.user.id\r\n        this.fromUser = this.fromUser + \"\"\r\n        // 字符串存储\r\n        let id = this.user?.id.toString();\r\n\r\n        // 加载聊天数据\r\n        this.load()\r\n\r\n        // 查询用户\r\n        request.get('/user/selectAllOnline').then(res => {\r\n            //过滤掉自己就可以 //实时刷新\r\n            res.data = res.data.filter(v => v.id  !== this.user.id )\r\n            this.$set(this.users, 'USER', res.data)\r\n        })\r\n\r\n\r\n    },\r\n    methods: {\r\n        initializeWebSocket(userId) {\r\n            this.websocket = new WebSocket(`ws://localhost:9090/imserverSingle/${userId}`);\r\n            this.websocket.onopen = this.onWebSocketOpen;\r\n            this.websocket.onclose = this.onWebSocketClose;\r\n            this.websocket.onmessage = this.onWebSocketMessage;\r\n        },\r\n        onWebSocketOpen() {\r\n            console.log('WebSocket连接已打开');\r\n            // 连接成功后的逻辑，例如获取初始数据\r\n        },\r\n        onWebSocketClose() {\r\n            console.log('WebSocket连接已关闭');\r\n            // 连接关闭后的逻辑\r\n        },\r\n        onWebSocketMessage(msg) {\r\n            if (msg.data) { // 检查接收到的消息是否存在。\r\n                let json = JSON.parse(msg.data)\r\n                if (json.users && json.users.length){\r\n                    this.loadOnline(json);\r\n                    return\r\n                }\r\n                if (json.content && (json.fromuser === this.fromUser.toString() && json.touser === this.toUser.toString())\r\n                    || json.touser === this.fromUser.toString() && json.fromuser === this.toUser.toString()) {  // 说明是两者互相发消息\r\n                    this.messages.push(json) //放到消息队列里\r\n                    this.scrollToBottom()  // 滚动页面到最底部\r\n                }\r\n                // 加载消息数字 两者通信如果是对面发来的消息 说明当前正在两个人的通信窗口\r\n                if (this.toUser.toString() === json.fromuser) {\r\n                    this.setUnReadNums()  // 把对方消息设为已读,更新未读消息数量\r\n                } else {  //用户发给对方的\r\n                    // 可能是当前用户发给对方的消息，或者是其他人通信 都 加载当前用户的未读消息数量 每次监听到通信事件就更新未读记录\r\n                    this.loadUnReadNums()\r\n                }\r\n            }\r\n            // 处理收到的WebSocket消息\r\n        },\r\n        shouldDisplayTime(index, group) {\r\n            if (index === 0) {\r\n                return true;\r\n            }\r\n            const currentTime = new Date(group[index].time).getTime();\r\n            const prevTime = new Date(group[index - 1].time).getTime();\r\n            return currentTime - prevTime > this.timeIntervalThreshold;\r\n        },\r\n\r\n        load() {\r\n            request.get('/imsingle?fromUser=' + this.fromUser.toString() + '&toUser=' + this.toUser.toString()).then(res => {\r\n                // console.log(res)\r\n                if (res.code === '200') {\r\n                    //把对方消息设为已读 这是两者的消息传递\r\n                    this.messages = res.data\r\n                    this.scrollToBottom()  // 滚动条滚动到最底部\r\n                } else {\r\n                    this.$notify.error(res.msg)\r\n                }\r\n                this.loadUnReadNums()\r\n            })\r\n        },\r\n        // 查询两个人的所有消息 同时把 对方 的消息设为已读\r\n        setUnReadNums() {\r\n            request.get('/imsingle?fromUser=' + this.fromUser.toString() + '&toUser=' + this.toUser.toString()).then(res => {\r\n                this.loadUnReadNums()\r\n            })\r\n        },\r\n        // 查询当前用户的所有未读数量并标记\r\n        loadUnReadNums() {\r\n            request.get('/imsingle/unReadNums?toUsername=' + this.fromUser.toString()).then(res => {\r\n                this.unRead = res.data\r\n                // console.log(this.unRead)STUDENT_池:2\r\n            })\r\n        },\r\n        //查询所有的在线人数\r\n        loadOnline(){\r\n            // 查询用户是否在线\r\n\r\n            request.get('/user/selectAllOnline').then(res => {\r\n                //过滤掉自己就可以 //实时刷新\r\n                res.data = res.data.filter(v => v.id  !== this.user.id )\r\n                this.$set(this.users, 'USER', res.data)\r\n            })\r\n        },\r\n\r\n        //发送消息\r\n        send() {\r\n            if (!this.toUser) {\r\n                this.$notify.error('请选择聊天用户')\r\n                return\r\n            }\r\n            if (client) {\r\n                let message = this.getMessage('text')\r\n                client.send(JSON.stringify(message))\r\n            }\r\n            document.getElementById('im-content').innerHTML = ''  // 清空输入框\r\n        },\r\n        //选择对方并查询两个人的所有消息 同时把 对方 的消息设为已读 更新所有未读记录\r\n        selectToUser(item) {\r\n            //设置发送的人以及对方的头像\r\n            this.toUserName = item.name\r\n            this.toUser = item.id\r\n            this.toAvatar = item.avatar\r\n            //查询聊天记录 同时把对方消息的设为已读\r\n            this.load()\r\n        },\r\n        //下载文件\r\n        download(file) {\r\n            window.open(file)\r\n        },\r\n        //发送的信息\r\n        getMessage(type) {\r\n            let inputBox = document.getElementById('im-content') //输入框输入的东西进行获取\r\n            const content = inputBox.innerHTML\r\n            if (!content && type === 'text') { //没有聊天内容\r\n                this.$notify.error('请输入聊天内容')\r\n                return\r\n            }\r\n            return {\r\n                fromuser: this.fromUser,//自己\r\n                fromavatar: this.user.avatar,\r\n                touser: this.toUser,\r\n                toavatar: this.toAvatar,\r\n                content: content,\r\n                type: type\r\n            }\r\n        },\r\n        // 设置文件类型 是图片还是文件 发送文件\r\n        handleFile(file) {\r\n            if (client) {\r\n                let message = this.getMessage('img')\r\n                message.content = file.data\r\n                //这是一个地址\r\n                let extName = file.data.substring(file.data.lastIndexOf('.') + 1)\r\n                if (['png', 'jpg', 'jpeg', 'gif', 'bmp', 'tiff', 'svg', 'webp'].includes(extName)) {\r\n                    message.type = 'img'\r\n                } else {\r\n                    message.type = 'file'\r\n                }\r\n                client.send(JSON.stringify(message))\r\n            }\r\n        },\r\n        //设置发送的表情\r\n        clickEmoji(emoji) {\r\n            document.getElementById('im-content').innerHTML += emoji\r\n        },\r\n        //滚动到最底部\r\n        scrollToBottom() {\r\n            this.$nextTick(() => {\r\n                // 设置聊天滚动条到底部\r\n                let imMessageBox = document.getElementsByClassName(\"im-message-box\")[0]\r\n                //设置滚动条到最底部\r\n                imMessageBox.scrollTop = imMessageBox.scrollHeight\r\n                console.log('触发滚动')\r\n            })\r\n        },\r\n\r\n        // 其他WebSocket相关方法和逻辑\r\n    },\r\n    // 在组件销毁前关闭WebSocket连接\r\n    beforeDestroy() {\r\n        if (this.websocket) {\r\n            this.websocket.close();\r\n        }\r\n    },\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}